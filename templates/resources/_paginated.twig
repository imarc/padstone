{##
 # This is just an example file showing a way to implement paginated resources.
 #
 # It has an accompanying JS file, resources-paginated.js.
 #}
{% do view.registerJsFile(mix('/js/resources.js')) %}
{% import "/_macros" as macros %}
{% set section = 'resourcesPage' %}
{% extends "_layouts/main" %}
{% block content %}
    {% include '_partials/hero' with {
        headline: entry.headline,
        subheadline: entry.subheadline
    } %}

    <div class="container">

        <search class="search mb-4" placeholder="Search resources" v-model="params.search"></search>

        <resources :params="params" v-slot="{ resources, meta: { pagination } = {} }">
            <div class="row row-cols-1 row-cols-md-3">
                <div v-for="resource in resources" :key="resource.id" class="col mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h4 class="card-title">
                                <a :href="resource.url" v-text="resource.title"></a>
                            </h4>
                            <div class="card-text" v-html="resource.description"></div>
                        </div>
                        <div class="card-footer d-flex justify-content-between align-items-center">
                            <a :href="resource.url" v-text="resource.cta" class="btn btn-sm btn-outline-primary"></a>
                            <small class="text-muted" v-text="resource.date"></small>
                        </div>
                    </div>
                </div>

                <pagination v-if="pagination" :total-pages="pagination.total_pages" v-model="params.page"></pagination>
            </div>
        </resources>
    </div>

{% endblock %}
