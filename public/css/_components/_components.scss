/**
 * _components.scss contains solely the mixin definitions for components.
 *
 * + This file should not depend on styles.scss; we should be able to use
 *   include this file without including styles.scss.
 * + This file should not generate any CSS on it's own; it should only contain
 *   mixin and/or function definitions.
 */

/**
 * Media query breakpoints
 */

$medium: 669px;
$large: 1024px;

/**
* ACCORDION
*
* ACCORDION requires the accordion.plugin.js file. Within the .accordion
* class each accordion item requires a div wrapper. Within the div wrapper
* there is a .header class and a .content class. The .header class is the
* clickable element that will reveal what is hidden in the .content class.
* By default .content is hidden by javascript just in case javascript is not available.
*
* Emmet: .accordion>div>(.header{header}+.content>{lorem ipsum})
*
*/

@mixin accordion() {
    > div {
        &.open {
            .header {
                background: darken($lightgray, 5%);
                &::after {
                    @include fontawesome("\f068");
                }
            }
        }
        &.close {
            .header{
                &::after {
                    @include fontawesome("\f067");
                }
            }
        }
        &.initially-hidden {
            .content {
                display: none;
            }
        }
        .header {
            background: $lightgray;
            color: $plain-text;
            cursor: pointer;
            font-size: 1em;
            margin-top: .5em;
            padding: .5em 1em;
            position: relative;
            text-align: left;
            width: 100%;
            &:hover {
                background: darken($lightgray, 5%);
            }
            &::after {
                bottom: 0;
                height: 1em;
                margin: auto 0;
                position: absolute;
                right: 1em;
                top: 0;
                width: 1em;
            }
        }
        .content {
            padding: 1em 0;
        }
    }
}


/**
 * BACKGROUND VIDEO
 *
 * BACKGROUND VIDEO plays a video (without sound) in the background of an element.
 * Emmet: .backgroundvideo>(.panel>div>h1+p)+video>source[src]
 */
@mixin backgroundvideo() {
    & {
        align-items: center;
        display: flex;
        height: auto;
        justify-content: center;
        overflow: hidden;
        position: relative;
        .mold {
            background-color: rgba(2255, 255, 255, 0.6);
            padding: 2em;
            text-align: center;
            z-index: 2;
        }
        video {
            left: 0;
            position: absolute;
            top: 0;
            width: 100%;
            z-index: 1;
        }
    }
    &::before {
        content: "";
        display: block;
        padding-top: 30%;
    }
}


/**
/**
 * BREADCRUMBS
 *
 * The breadcrumb mixin provides basic breadcrumb styling, complete with
 * fontawesome icons being used as separators between crumbs.
 *
 * Emmet: nav.breadcrumbs>ul>li*3>a
 */
@mixin breadcrumbs() {
    li:not(:last-child) a {
        padding-right: 0;

        &::after {
            @include fontawesome("\f105");
            padding-left: 0.5rem;
        }
    }
}


/**
 * CAROUSEL
 *
 * CAROUSEL uses Slick to create a carousel. It defaults to a rather
 * basic, one-slide-at-a-time implementation with dots, but slick supports a
 * good deal of configuration including showing multiple slides, breakpoints,
 * syncing between slides, and plenty of javascript events and methods for
 * integration.
 *
 * The implementation on Boilerplate is using a CDN to provide
 *
 * + slick.css
 * + slick-theme.css
 * + slick.min.js
 *
 * See http://kenwheeler.github.io/slick/ for more information.
 *
 * The carousel() mixin should be included on a parent element that contains
 * one div per slide. No additional classes are necessary – the slick classes
 * referenced are added dynamically by slick.
 *
 * <div class="carousel">
 *     <div>
 *         <h2>A slide!</h2>
 *         <p>Some text.</p>
 *     </div>
 * </div>
 *
 * Emmet: .carousel>div*3>h2+p
 *
 * While there's more information in slick's documentation, .slick-slide wraps
 * slides while .slick-next and .slick-prev are used for the next/previous
 * arrows.
 */
@mixin carousel() {
    .slick-slide {
        color: #FFF;
        height: auto;
        padding: 3rem;
    }
    .slick-prev,
    .slick-next {
        z-index: 1;
    }
    .slick-prev {
        left: 2rem;
    }
    .slick-next {
        right: 2rem;
    }
}


/**
 * COLUMNS
 *
 * The COLUMNS mixin makes it so that immmediate child elements appear as
 * columns. It is responsive, allowing you to specify the media query at which
 * to switch the layout from stacking to columns.
 *
 * Additionally, it assumes the use of <hr> elements to create visual gutters
 * that are only visible while displayed as columns.
 *
 * <div class="columns">
 *     <div>
 *         <h2>A column</h2>
 *     </div>
 *     <hr />
 *     <div>
 *         <h2>Another column</h2>
 *     </div>
 * </div>
 *
 * Emmet: .columns>div+(hr+div)*2
 */
@mixin columns() {
    > hr {
        border: 0;
        display: none;
    }
    @media only screen and (min-width: $medium) {
        & {
            display: table;
            table-layout: fixed;
            width: 100%;
            > * {
                display: table-cell;
                vertical-align: top;
            }
            > hr {
                display: table-cell;
                width: 1rem;
            }
        }
    }
}


/**
 * DOSSIER
 *
 * The DOSSIER mixin displays an individual’s biography and photograph.
 *
 * Emmet: .dossiers>div>(.photo>img^.bio>h2{Lorem Ipsum}+p.title{Vice President}+p{Lorem20})
 */
@mixin dossier($gutter: 2rem, $photoWidth: 25%, $direction: row) {
    > * {
        text-align: center;
        .photo {
            margin-bottom: 2rem;
        }
    }
    @media only screen and (min-width: $medium) {
        > * {
            display: flex;
            flex-direction: $direction;
            flex-wrap: nowrap;
            margin-bottom: 4rem;
            text-align: left;
            .photo {
                flex: 0 0 $photoWidth;
                margin-bottom: 0;
                margin-right: $gutter;
                @if $direction == row-reverse {
                    margin-left: $gutter;
                    margin-right: 0;
                }
            }
            .bio {
                .title {
                    color: $meta-text;
                    text-transform: uppercase;
                }
            }
        }
    }
}


/**
 * DROPDOWN
 *
 * The DROPDOWN mixin allows for dropdown menus. By default, a single
 * column dropdown is used. It is positioned to its parent.
 *
 * Emmet: nav.primary>ul>li>a{link name}+.dropdown>.menu>ul>li>(a{link name})*3
 */
@mixin dropdown() {
    @media only screen and (max-width: $large - 1px) {
        .dropdown,
        i.fa {
            display: none;
        }
    }
    @media only screen and (min-width: $large) {
        i.fa {
            display: inline-block;
        }
        .dropdown {
            background-color: #2A2A2A;
            color: #FFF;
            display: block;
            font-size: 1rem;
            min-width: 260px;
            opacity: 0;
            padding: 2rem 0;
            position: absolute;
            top: 100%;
            transition: opacity 300ms;
            visibility: hidden;
            z-index: 1;
            ul {
                display: block;
            }
            .menu {
                > * {
                    padding: 0 1rem;
                }
                li {
                    margin-bottom: 0.4em;
                }
                a {
                    color: #0C96DD;
                }
                a:hover,
                a:focus {
                    color: darken(#0C96DD, 10%);
                }
            }
        }
        .dropdown.open {
            opacity: 1;
            visibility: visible;
        }
    }
}


/**
 * DROPDOWN (mega)
 * The DROPDOWN (mega) mixin allows for full-width mega dropdown
 * menus. Call this mixin on a list item. Note that the simple
 * dropdown component is a dependency of this mega dropdown.
 * The mega dropdown is positioned to header.primary instead
 * of its parent list item.
 *
 * Emmet: nav.primary>ul>li>a{link name}+.dropdown>.menu(div*3)
 */
@mixin dropdown-mega() {
    position: static;
    @media only screen and (min-width: $large) {
        .dropdown {
            left: 0;
            top: 100%;
            width: 100%;
            .menu {
                display: flex;
                flex-flow: row wrap;
                justify-content: space-between;
                margin-left: auto;
                margin-right: auto;
                max-width: 1168px;
                > * {
                    border-left: 1px solid #777;
                    flex-basis: 0;
                    flex-grow: 1;
                    padding: 0 3rem;
                }
                > *:first-child {
                    border-left: none;
                    padding-left: 0;
                }
                > *:last-child {
                    padding-right: 0;
                }
            }
        }
    }
}


/**
 * FEATURES house three features in one row. Powered by flexbox,
 * this allows for a bottom alignment of each feature’s anchor. Use the
 * <code>$gutter</code> variable to pass you preferred gutter width.
 *
 * Emmet: .features>(div>(.icon>img)+h4+p+a)*3
 */
@mixin features($gutter: 3rem) {
    > * {
        background-color: #EEE;
        margin-bottom: 2rem;
        margin-left: auto;
        margin-right: auto;
        padding: 2rem;
        text-align: center;
        img,
        h3,
        p {
            margin-bottom: 1rem;
        }
        .button {
            margin-bottom: 0;
        }
    }
    @media only screen and (min-width: $large) {
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        > * {
            display: flex;
            flex: 1 0 0;
            flex-direction: column;
            margin-left: $gutter;
            margin-right: 0;
            .button {
                align-self: center;
                margin-top: auto;
            }
            &:first-child {
                margin-left: 0;
            }
        }
    }
}


/**
 * LISTING shows a listing of entries. It includes an optional search form with filters.
 * Remove the search form elements for a simple list.
 *
 * Emmet: .listing>(form>.search>(.text>label+input^.submit>label+input[type="submit"]))+p.guide{Showing 10 of 20}+ul>li>a>h2{Listing headline}
 */
@mixin listing() {
    margin-bottom: 2rem;
    form {
        .search {
            display: flex;
            label {
                @include visuallyhidden;
            }
            .text {
                flex-grow: 1;
            }
            .submit {
                flex-basis: 120px;
                flex-shrink: 0;
            }
            .submit input {
                height: 100%;
                width: 100%;
            }
        }
        .filters {
            margin-bottom: 2rem;
            label {
                display: inline;
            }
            span {
                background-color: darken($link, 20%);
                border-radius: 0.5rem;
                color: #fff;
                display: inline-block;
                margin: 0 0.5rem 0.5rem 0;
                padding: 0.5rem 1rem;
            }
            input[type="checkbox"]:checked + span {
                background-color: $link;
            }
            input[type="checkbox"] {
                display: none;
            }
        }
    }

    ul {
        list-style: none;
        padding: 0;
        margin: 0;
        li {
            border-top: 4px solid $border;
            margin-bottom: 0;
            padding: 2rem 0;
            .meta {
                display: block;
                font-size: 0.9rem;
                margin-bottom: 1em;
            }
            h2 + .meta {
                margin-top: -1em;
            }
            .summary {
                p:last-of-type {
                    margin-bottom: 0;
                }
            }
        }
    }
}


/**
 * The LOGIN mixin is a basic implementation of a login module that includes a
 * username input, password input, submit button, forgot password link, and
 * remember me checkbox
 *
 * Emmet: .login>form>(div.text>label{Username}+input)+(div.password>label{Password}+input[type="password"])+div.actions>(.submit>button{Login})+(label>input[type="hidden"]+input[type="checkbox"])+a{Forgot Your Password?}
 */
@mixin login {
    background: #EEE;
    margin-left: auto;
    margin-right: auto;
    max-width: 600px;
    padding: 3rem;
    input {
        &:focus {
            box-shadow: 0 0 5px rgba(114, 164, 0, 0.7);
        }
    }
    .submit {
        text-align: center;
    }
    .actions {
        text-align: center;

    }
    @media only screen and (min-width: $medium) {
        .actions {
            align-items: center;
            display: flex;
            justify-content: space-between;
            flex-flow: row wrap;
            > * {
                margin: 0;
                padding: 0;
            }
            label {
                margin-left: 1em;
            }
            a {
                display: block;
                margin-left: auto;
                text-align: right;
            }
        }
    }
}


/**
 * MOBILE NAVIGATION
 *
 * Emmet
 */

@mixin mobileNavigation() {
    background-color: $charcoal;
    bottom: 0;
    display: none;
    height: 100%;
    opacity: 0;
    overflow-y: auto;
    padding: 1rem;
    position: fixed;
    top: 0;
    transition: transform .25s;
    width: 80%;
    z-index: 1000;
    &.left {
        display: block;
        left: 0;
        right: auto;
        transform: translateX(-100%);
    }
    &.right {
        display: block;
        left: auto;
        right: 0;
        transform: translateX(100%);
    }
    &.left.open, &.right.open {
        transform: translateX(0);
        transition: transform .25s;
    }
    &.init {
        display: block;
        opacity: 1;
    }
    nav.utility {
        ul li a {
            padding: 0.75rem 0;
        }
    }
    ul {
        display: block;
        padding-left: 0;
    }
    ul li {
        align-items: center;
        border-bottom: 1px solid lighten($charcoal, 10%);
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        margin-bottom: 0;
        text-align: left;
        a {
            color: #fff;
            display: block;
            padding: 1rem 0;
        }
        i.fa {
            display: inline-block;
        }

    }
    @media only screen and (min-width: $large) {
        &.open.left {
            transform: translateX(-100%);
        }
        &.open.right {
            transform: translateX(100%);
        }
    }
}


/**
 * PAGINATION
 *
 * Emmet: nav.pagination>ul>(li.previous>a{Previous})+(li*2>a)+(li.active>a)+(li*2>a)+li.next>a{Next}
 */
@mixin pagination {
    display: flex;
    justify-content: center;
    ul {
        border: 1px solid $border;
        border-radius: 2px;
        display: flex;
        justify-content: center;
    }
    li {
        margin-bottom: 0;
    }
    a {
        color: $link;
        padding: 0.5rem 1rem;
        position: relative;
    }
    li:not(:last-child) a {
        border-right: 1px solid $border;
    }
    li.active a {
        background-color: $brand-blue;
        color: #fff;
        cursor: default;
        pointer-events: none;
        &::before,
        &::after {
            background-color: $brand-blue;
        }
        &:hover {
            color: #fff;
            background-color: $link-hover;
            &::before,
            &::after {
                background-color: $link-hover;
            }
        }
    }
    li.disabled a {
        color: $border;
        cursor: default;
        pointer-events: none;
    }
    li.previous a {
        &::before {
            @include fontawesome("\f100");
        }
    }
    li.next a {
        &::before {
            @include fontawesome("\f101");
        }
    }
    li:hover:not(.active):not(.disabled) {
        a {
            background-color: $link;
            color: #FFF;

            &::before {
                background-color: $link;
                color: #FFF;
            }
        }
    }
}


/**
 * PROGRESS BREADCRUMBS
 *
 * the progress mixin provides a basic, pill-style progress nav bar like you
 * might find as part of an e-commerce or registration process.
 *
 * Emmet: nav.progress>ul>(li.complete*2>a)+(li.active>a)+(li*2>a)
 */
@mixin progress() {
    ul {
        border: 1px solid $border;
        border-radius: 2px;
        display: block;
        width: 100%;
    }
    a {
        padding: 0.5rem 1rem;
        position: relative;
        text-align: center;
        &:hover {
            color: $link-hover;
        }
    }
    li:not(:last-child) a {
        border-right: 1px solid $border;
    }
    li.active {
        a {
            background-color: $link;
            color: #FFF;
            cursor: default;
            pointer-events: none;

            &:hover {
                background-color: $link-hover;
                color: #FFF;
            }
        }
    }
    li.disabled a {
        color: $border;
        cursor: default;
        pointer-events: none;
    }
    li:hover:not(.active,.disabled) a {
        color: $link-hover;
    }
    li:not(:last-child) a {
        border: 0;
    }
    li.complete a {
        background-color: #FFF;
        color: #ccc;
        &::before {
            background-color: #FFF;
        }
        &:hover {
            color: $link;
        }
    }
    @media only screen and (min-width: $medium) {
        ul {
            display: flex;
        }
        li {
            flex: 1 1 auto;
            position: relative;
        }
        li:last-child a {
            &::before {
                display: none;
            }
        }
        a {
            &::after,
            &::before {
                border: 0 solid transparent;
                border-bottom: 1.25rem solid rgba(0,0,0,0);
                border-left: 1rem solid #FFF;
                border-top: 1.25rem solid rgba(0,0,0,0);
                content: '';
                position: absolute;
                right: 0;
                top: 0;
                z-index: 1;
            }
            &::after {
                border-left-color: #FFF;
            }
            &::before {
                border-left-color: darken($border, 10%);
                margin-right: -1px;
            }
        }
        li.active {
            margin-left: -1rem;
            z-index: 2;
            &::before {
                border-bottom: 1.25rem solid $link;
                border-left: 1rem solid #FFF;
                border-top: 1.25rem solid $link;
                content: '';
                display: block;
                position: absolute;
                left: 0;
                top: 0;
                z-index: 2;
            }
            a {
                &::after,
                &::before {
                    background-color: $link;
                    border-bottom-color: #FFF;
                    border-left-color: $link;
                    border-top-color: #FFF;
                }
                &::before {
                    margin-right: 0;
                }
            }
            a:hover {
                &::after,
                &::before {
                    background-color: $link-hover;
                }
            }
        }
    }
}


/**
 * STICKY HEADER
 *
 * The STICKY-HEADER mixin works with js (sticky-header.plugin.js) to hide the
 * header as you scroll down, and show it as you scroll back up. This is
 * responsive as the "top" value is dynamically set in the
 * js based on the height of the header. Top padding is also added
 * to the body dynamically via js so that the header doesn't overlap any
 * content.
 *
 * Emmet: header.primary
 *
 **/
@mixin sticky-header() {
    position: fixed;
    top: 0;
    transition: top 0.16s cubic-bezier(0, .40, .70, 1);
    width: 100%;
    z-index: 100;
}


/**
 * TABS
 *
 * Emmet: nav.tabs>ul>li*3>a
 */
@mixin tabs {
    a {
        border-radius: 4px 4px 0 0;
        border: 1px solid $border;
        border-color: transparent transparent $border;
    }

    li.active {
        a {
            border-color: $border $border transparent;
        }
    }

    li:hover:not(.active) {
        a {
            background: $border;
        }
    }
}


/**
* TESTIMONIAL
*
* The TESTIMONIAL mixin is a basic implementation of a testimonial design.
* Emmet: div.testimonial>div.container>blockquote+p
* To use the TESTIMONIAL WITH ASSET component, you simply need to add additional html markup, see emmet below.
* Emmet: div.testimonial.asset>div.container>(div>img)+blockquote+p
*/

@mixin testimonial($gutterWidth: 4rem) {
    background-color: $charcoal;
    margin-bottom: 4rem;
    padding: 4rem 0 4rem;
    text-align: center;
    .asset {
        margin-bottom: 2rem;
        img {
            max-width: 280px;
        }
    }
    blockquote {
        border: none;
        color: #fff;
        font-size: 1.125rem;
        margin-bottom: 1rem;
        padding: 0 2.5rem;
        position: relative;
        &::before,
        &::after {
            color: $meta-text;
            font-family: Georgia, serif;
            font-size: 3.375rem;
            position: absolute;
        }
        &::before {
            content: "“";
            left: 0;
            line-height: 1;
            top: 0;
        }
        &::after {
            content: "”";
            line-height: 0;
            right: 0;
            bottom: 0;
        }
        ~ p {
            color: $meta-text;
            font-size: 0.875rem;
            margin-bottom: 0;
            padding: 0 2.5rem;
        }
    }
    @media only screen and (min-width: $large) {
        text-align: left;
        .container > div {
            display: flex;
            justify-content: space-between;
        }
        .asset {
            flex-basis: 33%;
            flex-shrink: 0;
            margin-bottom: 0;
            margin-right: $gutterWidth;
            img {
                max-width: 100%;
            }
        }
        blockquote {
            font-size: 1.5rem;
            padding: 0 6rem;
            &::before,
            &::after {
                font-size: 7rem;
            }
            ~ p {
                font-size: 1rem;
                padding: 0 6rem;
            }
        }
    }
}


/**
 *  TILES
 *
 *  Tiles helps you create an equal-width column grid layout without the use of row wrappers.
 *  Tiles is similar to the Features component, expect that Tiles’s items can wrap.
 *  Powered by flexbox, you can pass in a $gutter width and $column amount. Note that the
 *  specified $column amount only is respected at the large breakpoint. Tiles will automatically
 *  two-up your items at the medium breakpoint, and stack them at the small breakpoint.
 *
 *
 * Emmet: .tiles>.tiles
 *
 **/

@mixin tiles($gutter: 2rem, $columns: 4) {
    > * {
        background-color: #EEE;
        margin-bottom: $gutter;
        padding: 2rem;
        text-align: left;
        *:last-child {
            margin-bottom: 0;
        }
    }
    @media only screen and (min-width: $medium) {
        display: flex;
        flex-flow: row wrap;
        margin-left: -1rem;
        margin-right: -1rem;
        > * {
            flex-basis: calc(50% - #{$gutter});
            flex-shrink: 0;
            margin-left: $gutter / 2;
            margin-right: $gutter / 2;
        }
    }
    @media only screen and (min-width: $large) {
        > * {
            flex-basis: calc((100% / #{$columns}) - (#{$gutter}));
        }
    }
}
